import "../../css/mngtDetail.css";
import Sidebar from "../../components/sidebar/Sidebar";
import Navbar from "../../components/navbar/Navbar";
import { Link, useParams } from "react-router-dom";
import React, { useState, useEffect } from 'react';
import axios from "axios";
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import CheckIcon from '@mui/icons-material/Check';
import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableCell from "@mui/material/TableCell";
import TableContainer from "@mui/material/TableContainer";
import TableHead from "@mui/material/TableHead";
import TableRow from "@mui/material/TableRow";
import Paper from "@mui/material/Paper";

//ƒê√£ check
const OrderDetail = () => {
    const { orderId } = useParams();
    const [order, setOrder] = useState(null);
    const [message, setMessage] = useState('');
    const [showProgressBar, setShowProgressBar] = useState(false);
    const [currentStep, setCurrentStep] = useState(1);
    const [complete, setComplete] = useState(false);
    const [cancelled, setCancelled] = useState(false); // Th√™m tr·∫°ng th√°i cho vi·ªác h·ªßy
    const [isWaitingConfirmation, setIsWaitingConfirmation] = useState(true); // Th√™m tr·∫°ng th√°i cho vi·ªác ki·ªÉm tra b∆∞·ªõc ch·ªù x√°c nh·∫≠n
    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await axios.get(`http://localhost:8080/api/order/all`);
                const getOrderId = response.data.find(order => order.id === parseInt(orderId));
                setOrder(getOrderId);
                setCurrentStep(getOrderId.orderStatus.id);
                if (getOrderId.orderStatus.status !== "watingConfirmation") {
                    setIsWaitingConfirmation(false);
                };
                if (getOrderId.orderStatus.status === "Completed") {
                    setComplete(true);
                };
                if (getOrderId.orderStatus.status === "Cancel") {
                    setCancelled(true);
                }
            } catch (error) {
                console.error('Error fetching product data:', error);
            }
        };
        fetchData();
        if (showProgressBar) {
            const timer = setTimeout(() => {
                setMessage('');
                setShowProgressBar(false);
            }, 2000); // Th·ªùi gian hi·ªÉn th·ªã thanh th·ªùi gian ch·∫°y: 3000ms
            return () => clearTimeout(timer);
        }
    }, [showProgressBar, orderId]);
    if (!order) {
        return <div>Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.</div>;
    }
    const steps = [
        // { label: 'H·ªßy', icon: '‚ùå' },
        { label: 'Ch·ªù x√°c nh·∫≠n', icon: '‚è≥' },
        { label: 'Ch·ªù l·∫•y h√†ng', icon: 'üöö', text: 'X√°c nh·∫≠n' },
        { label: 'ƒêang ƒë·∫øn', icon: 'üì¶', text: 'L·∫•y h√†ng' },
        { label: 'ƒê√£ giao', icon: 'üéâ', text: 'ƒê√£ giao' },
    ];

    const handleUpdateStatus = async (id, status) => {
        console.log('c·∫≠p nh·∫≠t')
        setShowProgressBar(true);
        try {
            const response = await axios.put(`http://localhost:8080/api/order/${id}/${status + 1}`)
            if (response.status === 200) {
                setMessage('C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!');
            } else {
                setMessage('C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i.');
                //fetchData();
            }
        } catch (error) {
            console.error('Error deleting product:', error);
            setMessage('L·ªói!');
        }
        // Code x·ª≠ l√Ω c·∫≠p nh·∫≠t tr·∫°ng th√°i ·ªü ƒë√¢y
        // Sau khi c·∫≠p nh·∫≠t xong, b·∫°n c√≥ th·ªÉ thay ƒë·ªïi c√°c gi√° tr·ªã c·ªßa steps v√† currentStep t√πy thu·ªôc v√†o tr·∫°ng th√°i m·ªõi
    };
    const handleCancelOrder = async (id) => {
        console.log("H·ªßy ƒë∆°n h√†ng");
        setCancelled(true);
        setCurrentStep(steps.length + 1);
        // Chuy·ªÉn sang b∆∞·ªõc cu·ªëi c√πng khi h·ªßy
        setShowProgressBar(true);
        try {
            const response = await axios.put(`http://localhost:8080/api/order/${id}/5`)
            if (response.status === 200) {
                setMessage('H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng!');
                //setData(data.filter((item) => item.id !== id));
            } else {
                setMessage('H·ªßy ƒë∆°n h√†ng th·∫•t b·∫°i.');
            }
        } catch (error) {
            console.error('Loi huy don hang:', error);
            setMessage('L·ªói!');
        }
    };
    const consolidateItems = (items) => {
        const consolidatedItems = {};
        items.forEach(item => {
            if (consolidatedItems[item.product.name]) {
                consolidatedItems[item.product.name].quantity += item.quantity;
            } else {
                consolidatedItems[item.product.name] = { ...item };
            }
        });
        return Object.values(consolidatedItems);
    };
    const calculateTotalPrice = () => {
        let totalPrice = 0;
        order.items.forEach(item => {
            // totalPrice += item.price * item.quantity;
            totalPrice += item.price;
        });
        return totalPrice;
    };
    const calculateDiscount = () => {
        if (order.discount && order.discount.isExist) {
            // return calculateTotalPrice() * order.discount.percent;
            return calculateTotalPrice() - order.totalprice
        }
        return 0;
    };
    return (
        <div className="single">
            <Sidebar />
            <div className="singleContainer">
                <Navbar />
                <Link to={`/admin/orderManagement`} className="arrow-back-icon" style={{ textDecoration: "none" }}>
                    <ArrowBackIcon />
                </Link>
                {message && (
                    <div className="success-message">
                        {message}
                        {showProgressBar && <div className="progress-bar" />}
                    </div>
                )}
                <div className="top">
                    <div className="left">
                        <h1 className="title">Th√¥ng tin ƒë∆°n h√†ng</h1>
                        <h3 className="itemTitle2 ">ƒê∆°n h√†ng: {order.id}</h3>
                        <div className="item2">
                            <div className="details2">
                                <div className="detailItem2" >
                                    <span className="itemKey2">Kh√°ch h√†ng:</span>
                                    <span className="itemValue">{order.account.firstname || ''} {order.account.lastname || ''}</span>
                                </div>
                                <div className="detailItem2">
                                    <span className="itemKey2">S·ªë ƒëi·ªán tho·∫°i:</span>
                                    <span className="itemValue">{order.account.phonenumber}</span>
                                </div>
                                <div className="detailItem2">
                                    <span className="itemKey2">email:</span>
                                    <span className="itemValue">{order.account.email}</span>
                                </div>
                                <div className="detailItem2">
                                    <span className="itemKey2">ƒê·ªãa ch·ªâ:</span>
                                    <span className="itemValue">
                                        {order.account.address ? (
                                            <span>
                                                {order.account.address.street ? order.account.address.street + ', ' : '_, '}
                                                {order.account.address.ward ? order.account.address.ward + ', ' : '_, '}
                                                {order.account.address.district ? order.account.address.district + ', ' : '_, '}
                                                {order.account.address.province ? order.account.address.province + '.' : '_'}
                                            </span>
                                        ) : (
                                            <span></span>
                                        )}
                                    </span>
                                </div>

                                <div className="detailItem2">
                                    <span className="itemKey2">Ng√†y ƒë·∫∑t h√†ng:</span>
                                    <span className="itemValue">{order.orderdate}</span>
                                </div>
                                <div className="detailItem2">
                                    <span className="itemKey2">Khuy·∫øn m√£i √°p d·ª•ng</span>
                                    <span className="itemValue">
                                        {order.discount?.code ? (
                                            <span>
                                                {/* {order.discount?.code} gi·∫£m {order.discount?.percent * 100}% */}
                                                {order.discount?.code} gi·∫£m {calculateDiscount() * 100 / calculateTotalPrice()}%
                                            </span>
                                        ) : (
                                            <span></span>
                                        )}
                                    </span>
                                </div>
                                <div className="detailItem2">
                                    <span className="itemKey2">M√£ h√≥a ƒë∆°n:</span>
                                    <span className="itemValue">
                                        {order.bill.id}
                                    </span>
                                </div>
                                <div className="detailItem2">
                                    <span className="itemKey2">Ng√†y xu·∫•t h√≥a ƒë∆°n:</span>
                                    <span className="itemValue">
                                        {order.bill.issuedate}
                                    </span>
                                </div>
                                <div className="detailItem2">
                                    <span className="itemKey2">H√¨nh th·ª©c thanh to√°n:</span>
                                    <span className="itemValue">
                                        {order.checkout?.method === 'Credit Card' ? 'Th·∫ª t√≠n d·ª•ng'
                                            : order.checkout?.method === 'cash' ? 'Ti·ªÅn m·∫∑t' : ''}
                                    </span>
                                </div>
                                <div className="detailItem2">
                                    <span className="itemKey2">Tr·∫°ng th√°i:</span>
                                    <span className="itemValue">
                                        {order.orderStatus?.status === 'watingConfirmation' ? 'Ch·ªù x√°c nh·∫≠n'
                                            : order.orderStatus?.status === 'Processing' ? 'Ch·ªù l·∫•y h√†ng'
                                                : order.orderStatus?.status === 'beingTransported' ? 'ƒêang ƒë·∫øn'
                                                    : order.orderStatus?.status === 'Completed' ? 'ƒê√£ giao'
                                                        : order.orderStatus?.status === 'Cancel' ? 'H·ªßy'
                                                            : ''}
                                    </span>
                                </div>

                            </div>
                        </div>

                        <div>
                            <TableContainer component={Paper} className="table">
                                <Table sx={{ minWidth: 650 }} aria-label="simple table">
                                    <TableHead>
                                        <TableRow>
                                            <TableCell className="tableCell">STT</TableCell>
                                            <TableCell className="tableCell">T√™n m√≥n ƒÉn</TableCell>
                                            <TableCell className="tableCell">Gi√°</TableCell>

                                            <TableCell className="tableCell">S·ªë l∆∞·ª£ng</TableCell>
                                            <TableCell className="tableCell">T·ªïng ti·ªÅn</TableCell>

                                        </TableRow>
                                    </TableHead>

                                    {/* <TableBody>
                                        {order.items.map((item, index) => (

                                            <TableRow key={index}>
                                                <TableCell>{index + 1}</TableCell> 
                                           </Table>     <TableCell>{item.product.name}</TableCell>
                                                <TableCell>{item.price}</TableCell>
                                                <TableCell>{item.quantity}</TableCell>
                                            </TableRow>
                                        ))}
                                    </TableBody> */}

                                    <TableBody>
                                        {consolidateItems(order.items).map((item, index) => (
                                            <TableRow key={index}>
                                                <TableCell>{index + 1}</TableCell> {/* S·ªë th·ª© t·ª± t·ª± ƒë·ªông tƒÉng */}
                                                <TableCell><img className="cellImg" src={item.product.url_image_product} alt="avatar" />{item.product.name}</TableCell>
                                                <TableCell>{item.price / item.quantity}</TableCell>

                                                <TableCell>{item.quantity}</TableCell>
                                                <TableCell>{item.price}</TableCell>
                                            </TableRow>
                                        ))}
                                    </TableBody>
                                </Table>
                                <div className="TotalPrice">
                                    <div className="TotalPrice_item">
                                        <p className="TotalPrice_item1" >T·ªïng ti·ªÅn t·∫•t c·∫£ m√≥n ƒÉn:</p>
                                        <p className="TotalPrice_item2">{calculateTotalPrice()}<p className="VND">ƒë</p></p>
                                    </div>
                                    <div className="TotalPrice_item">
                                        <p className="TotalPrice_item1" >Khuy·∫øn m√£i:</p>
                                        <p className="TotalPrice_item2">- {calculateDiscount()}<p className="VND">ƒë</p></p>
                                    </div>
                                    <div className="TotalPrice_item">
                                        <p className="TotalPrice_item1" >Ph√≠ giao h√†ng:</p>
                                        <p className="TotalPrice_item2">+ 10000<p className="VND">ƒë</p></p>
                                    </div>
                                    <div className="TotalPrice_item">
                                        <p className="TotalPrice_item1" >Thanh to√°n:</p>
                                        <p className="TotalPrice_item2">{calculateTotalPrice() - calculateDiscount() + 10000}<p className="VND">ƒë</p></p>
                                    </div>

                                </div>
                            </TableContainer>

                        </div>
                    </div>




                    {/* <div className="right">
                        <Chart aspect={3 / 1} title="User Spending ( Last 6 Months)" />
                    </div> */}
                </div>
                <div className="bottom">
                    <h1 className="title">C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng</h1>

                    <div className="updateStatus">
                        <div className="flex justify-between">
                            {steps?.map((step, i) => (
                                <div
                                    key={i}
                                    className={`step-item ${currentStep === i + 1 && "active"} ${i + 1 < currentStep || complete ? "complete" : ""} ${cancelled && i + 1 <= steps.length && "cancel"
                                        } `}

                                >


                                    <div className="step">

                                        {i + 1 < currentStep + 1 || complete ?
                                            <CheckIcon size={24} /> : i + 1}
                                    </div>

                                    {/* <p className="text-gray-500">{step}</p> */}
                                    <span className="step-label">{step.label}</span>
                                    <span className="step-icon">{step.icon}</span>
                                </div>
                            ))}
                        </div>

                        {!complete && (
                            <button
                                className={`btn ${cancelled && "hide"}`} // Th√™m l·ªõp 'cancel' khi b·ªã h·ªßy
                                onClick={() => {
                                    handleUpdateStatus(order.id, order.orderStatus.id);
                                    setIsWaitingConfirmation(false);
                                    currentStep === steps.length - 1 ? setComplete(true) : setCurrentStep((prev) => prev + 1);
                                }}
                                disabled={cancelled} // V√¥ hi·ªáu h√≥a n√∫t khi b·ªã h·ªßy
                            >
                                {/* {currentStep === steps.length ? "Finish" : steps[currentStep].text} */}
                                {currentStep === steps.length ? "Ho√†n Th√†nh" : "C·∫≠p nh·∫≠t"}
                            </button>
                        )}

                        {/* <button
                            className={`btn ${cancelled ? "cancel" : ""}`} // Th√™m l·ªõp 'cancel' khi b·ªã h·ªßy
                            onClick={() => {
                                setCancelled(true); // ƒê√°nh d·∫•u b·ªã h·ªßy khi nh·∫•n n√∫t 'H·ªßy'
                            }}
                        >
                            {currentStep === steps.length ? "Finish" : "H·ªßy"}
                        </button> */}
                        <button
                            className={`btn ${!isWaitingConfirmation && "hide"} ${cancelled && "hide"}`} // Th√™m l·ªõp 'hide' ƒë·ªÉ ·∫©n n√∫t khi kh√¥ng ·ªü b∆∞·ªõc ch·ªù x√°c nh·∫≠n
                            onClick={() => {
                                handleCancelOrder(order.id);
                                setCancelled(true);
                                // currentStep === steps.length ? setComplete(true) : setCurrentStep((prev) => prev + 1);
                            }}
                        >
                            {/* 
                            {currentStep === steps.length ? "Finish" : "H·ªßy"} */}
                            H·ªßy

                        </button>
                        <div className="messageStatus messageStatus_cancel ">
                            {cancelled && <p>ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy</p>}
                        </div>
                        <div className="messageStatus messageStatus_complete">
                            {complete && <p>ƒê∆°n h√†ng ƒë√£ giao th√†nh c√¥ng</p>}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default OrderDetail;
